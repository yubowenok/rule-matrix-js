import * as d3 from 'd3';
import { ColorType, Painter } from '../Painters';
import { Rule, Streams, RuleList } from '../../models';
import { ConditionalStreams } from '../../models';
export declare function flattenRules(rules: Rule[]): Rule[];
export interface OptionalParams {
    evidenceWidth: number;
    duration: number;
    fontSize: number;
    minSupport: number;
    minFidelity: number;
    headerSize: number;
    headerRotate: number;
    paddingX: number;
    paddingY: number;
    paddingLeft: number;
    flowWidth: number;
    x0: number;
    y0: number;
    elemWidth: number;
    elemHeight: number;
    color: ColorType;
    expandFactor: [number, number];
    displayFlow: boolean;
    displayFidelity: boolean;
    displayEvidence: boolean;
    zoomable: Boolean;
    tooltip: Boolean;
}
export interface RuleMatrixParams extends Partial<OptionalParams> {
    model: RuleList;
    support: number[][] | number[][][];
    streams?: Streams | ConditionalStreams;
    input?: number[] | null;
}
export default class RuleMatrixPainter implements Painter<{}, RuleMatrixParams> {
    static defaultParams: OptionalParams;
    private selector;
    private params;
    private minSupport;
    private minFidelity;
    private model;
    private support;
    private rules;
    private xs;
    private ys;
    private widths;
    private heights;
    private features;
    private featureCounts;
    private f2Idx;
    private expandedElements;
    private expandedFeatures;
    private activeFeatures;
    private rowPainter;
    private flowPainter;
    private outputPainter;
    private headerPainter;
    constructor();
    feature2Idx(f: number): number;
    update(params: RuleMatrixParams): this;
    collapseAll(): void;
    clickExpand(r: number): void;
    clickCondition(r: number, f: number): void;
    clickFeature(f: number): void;
    updateRules(): this;
    updatePresentation(): this;
    updatePos(): this;
    render(selector: d3.Selection<SVGGElement, any, any, any>): this;
    renderRows(root: d3.Selection<SVGGElement, any, any, any>): this;
    renderOutputs(root: d3.Selection<SVGGElement, any, SVGElement, any>): this;
    renderFlows(root: d3.Selection<SVGGElement, any, any, any>): this;
    renderHeader(root: d3.Selection<SVGGElement, any, any, any>): this;
    renderCursorFollow(root: d3.Selection<SVGGElement, any, any, any>, cursorFollow: d3.Selection<SVGGElement, any, any, any>): this;
    private renderToolTip;
    private renderLine;
    private renderButton;
    private registerZoom;
    private getHeight;
    private getWidth;
}
